TS setup
npm i -D jest @types/jest typescript ts-jest

npx ts-jest config:init

-> create tsconfig.json (example file)
{
    "include": ["./src/**/*"],
    "exclude": ["node_modules"],
    "compilerOptions": {
        "target": "es2016",
        "module": "ES2015" /* Specify what module code is generated. */,
        "rootDir": "./src" /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */,
        "outDir": "./build",
        "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
        "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
        "strict": true /* Enable all strict type-checking options. */,
        "skipLibCheck": true /* Skip type checking all .d.ts files. */
    },
    "ts-node": {
        "esm": true,
        "compilerOptions": {
            "module": "CommonJS"
        }
    }
}

-> create dir: src
-> create index.ts


-> create tsconfig.build.json
{
    "extends": "./tsconfig.json",
    "exclude": ["src/**/*.spec.ts", "src/**/*.test.ts"]
}

-> install nodemon

"scripts": {
        "start": "nodemon src/index.ts",
        "test": "jest",
        "build": "tsc  --project tsconfig.build.json"
},








//////////////
/// adv TS ///
//////////////

~1~
if ('swim' in creature){
    creature.swim()
}

~2~
function isABC(input: string) : input is ABC {
    return input === 'A' || input === 'B' || input === 'C';
}

~2.5~
function compare(a: string, b: string) : -1 | 0 | 1 {
    return a === b ? 0 : (a>b) ? 1 : -1;
}

~3~
type SomeType = Pick<User, 'id' | 'roles'>;
// Omit<User, 'id'>
// Partial<User> & {id:number}  // all ?, id must exist